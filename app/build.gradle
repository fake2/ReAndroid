/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'


}
/**
 * The android block is where you configure all your Android-specific
 * build options.
 */

android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdk versions.compileSdk
    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */

    defaultConfig {
        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId "com.example.reandroid"
        // Defines the minimum API level required to run the app.
        minSdk versions.minSdk
        // Specifies the API level used to test the app.
        targetSdk versions.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the default Proguard rules file.
         */

        release {
            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /**
     * The productFlavors block is where you can configure multiple product flavors.
     * This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors
     * are optional, and the build system does not create them by default.
     *
     * This example creates a free and paid product flavor. Each product flavor
     * then specifies its own application ID, so that they can exist on the Google
     * Play Store, or an Android device, simultaneously.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and assign each flavor to a flavor dimension.
     */


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion versions.compose
        kotlinCompilerVersion '1.4.32'
    }

}

dependencies {
    implementation 'androidx.core:core-ktx:1.5.0'

    implementation deps.timber

    // hilt
    implementation deps.hilt.core
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    kapt deps.hilt.compiler

    implementation deps.coroutines

    // support library
    implementation deps.appCompat
    implementation deps.material
    implementation deps.constraintLayout
    implementation deps.fragment
    implementation deps.recyclerView
    implementation deps.cardView

    // architecture components
    implementation deps.lifecycle.viewModel
    implementation deps.lifecycle.liveData
    implementation deps.lifecycle.savedState
    implementation deps.lifecycle.annotatinProcessor
    implementation deps.lifecycle.service
    testImplementation deps.lifecycle.test

    implementation deps.room.runtime
    annotationProcessor deps.room.annotatinProcessor
    testImplementation deps.room.test

    implementation deps.navigation.fragment
    implementation deps.navigation.ui
    implementation deps.navigation.compose
    androidTestImplementation deps.navigation.test

    // network
    implementation deps.okhttp3.loggingInterceptor
    implementation deps.retrofit.core
    implementation deps.retrofit.converterScalars
    implementation deps.retrofit.converterGson

    // compose
    implementation deps.compose.ui
    implementation deps.compose.material
    implementation deps.compose.materialIcons
    implementation deps.compose.materialIconsExtened
    implementation deps.compose.foundation
    implementation deps.compose.uiTooling
    implementation deps.compose.activityCompose
    implementation deps.compose.viewModel
    implementation deps.compose.liveData
    androidTestImplementation deps.compose.test


    // test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}